/**
  LIN Slave Application
	
  Company:
    Microchip Technology Inc.

  File Name:
    lin_app.h

  Summary:
    LIN Slave Application

  Description:
    This header file provides the interface between the user and 
    the LIN drivers.

 */

/*
    (c) 2016 Microchip Technology Inc. and its subsidiaries. You may use this
    software and any derivatives exclusively with Microchip products.

    THIS SOFTWARE IS SUPPLIED BY MICROCHIP "AS IS". NO WARRANTIES, WHETHER
    EXPRESS, IMPLIED OR STATUTORY, APPLY TO THIS SOFTWARE, INCLUDING ANY IMPLIED
    WARRANTIES OF NON-INFRINGEMENT, MERCHANTABILITY, AND FITNESS FOR A
    PARTICULAR PURPOSE, OR ITS INTERACTION WITH MICROCHIP PRODUCTS, COMBINATION
    WITH ANY OTHER PRODUCTS, OR USE IN ANY APPLICATION.

    IN NO EVENT WILL MICROCHIP BE LIABLE FOR ANY INDIRECT, SPECIAL, PUNITIVE,
    INCIDENTAL OR CONSEQUENTIAL LOSS, DAMAGE, COST OR EXPENSE OF ANY KIND
    WHATSOEVER RELATED TO THE SOFTWARE, HOWEVER CAUSED, EVEN IF MICROCHIP HAS
    BEEN ADVISED OF THE POSSIBILITY OR THE DAMAGES ARE FORESEEABLE. TO THE
    FULLEST EXTENT ALLOWED BY LAW, MICROCHIP'S TOTAL LIABILITY ON ALL CLAIMS IN
    ANY WAY RELATED TO THIS SOFTWARE WILL NOT EXCEED THE AMOUNT OF FEES, IF ANY,
    THAT YOU HAVE PAID DIRECTLY TO MICROCHIP FOR THIS SOFTWARE.

    MICROCHIP PROVIDES THIS SOFTWARE CONDITIONALLY UPON YOUR ACCEPTANCE OF THESE
    TERMS.
*/


#ifndef LIN_APP_H
#define	LIN_APP_H

#include "lin_slave.h"

typedef enum {
    LIN_COMMAND = 0x00,
    LIN_TRIGGER_TYPE = 0x01,
    LIN_ENTER_SLEEP_MODE = 0x02,
    LIN_TJ_LIMIT = 0x10,
    LIN_FACTOR_RDSON_RTHJS = 0x11,
    LIN_FACTOR_RDSON_RTHSA = 0x12,
    LIN_CURRENT2COUNTS_SQUARED = 0x13,
    LIN_ISENSE_MAX = 0x14,
    LIN_DAC_I_HW_TRIP = 0x15,
    LIN_B1_COEF = 0x16,
    LIN_REDUCED_DRIVE_TIME = 0x17,
    LIN_TCC_SAMPLE_TIME = 0x18,
    LIN_OUTPUT_STATE = 0x20,
    LIN_GET_TRIGGER_TYPE = 0x21,
    LIN_OVER_CURRENT_FAULT = 0x22,
    LIN_UVLO_FAULT = 0x23,
    LIN_OVER_TEMP_FAULT = 0x24,
    LIN_ADC_VCC_SENSE = 0x25,
    LIN_ADC_CURRENT_SENSE_UNCORRECTED = 0x26,
    LIN_ADC_TEMP_SENSE = 0x27,
    LIN_ADC_CURRENT_SENSE_CORRECTED = 0x28,
    LIN_CURRENT_SENSE_OFFSET = 0x29,
    LIN_AMBIENT_TEMPERATURE = 0x2A,
    LIN_HEATSINK_TEMPERATURE = 0x2B,
    LIN_JUNCTION_TEMPERATURE = 0x2C,
    LIN_TEMPERATURE_RISE_JS = 0x2D,
    LIN_TEMPERATURE_RISE_SA = 0x2E,
    LIN_DIAGNOSTIC = 0x2F
}lin_cmd_t;

uint8_t LIN_COMMAND_Data[1];
uint8_t LIN_TRIGGER_TYPE_Data[1];
uint8_t LIN_ENTER_SLEEP_MODE_Data[1];
uint8_t LIN_TJ_LIMIT_Data[1];
uint8_t LIN_FACTOR_RDSON_RTHJS_Data[2];
uint8_t LIN_FACTOR_RDSON_RTHSA_Data[2];
uint8_t LIN_CURRENT2COUNTS_SQUARED_Data[2];
uint8_t LIN_ISENSE_MAX_Data[2];
uint8_t LIN_DAC_I_HW_TRIP_Data[1];
uint8_t LIN_B1_COEF_Data[1];
uint8_t LIN_REDUCED_DRIVE_TIME_Data[1];
uint8_t LIN_TCC_SAMPLE_TIME_Data[2];
uint8_t LIN_OUTPUT_STATE_Data[1];
uint8_t LIN_GET_TRIGGER_TYPE_Data[1];
uint8_t LIN_OVER_CURRENT_FAULT_Data[1];
uint8_t LIN_UVLO_FAULT_Data[1];
uint8_t LIN_OVER_TEMP_FAULT_Data[1];
uint8_t LIN_ADC_VCC_SENSE_Data[2];
uint8_t LIN_ADC_CURRENT_SENSE_UNCORRECTED_Data[2];
uint8_t LIN_ADC_TEMP_SENSE_Data[2];
uint8_t LIN_ADC_CURRENT_SENSE_CORRECTED_Data[2];
uint8_t LIN_CURRENT_SENSE_OFFSET_Data[2];
uint8_t LIN_AMBIENT_TEMPERATURE_Data[2];
uint8_t LIN_HEATSINK_TEMPERATURE_Data[2];
uint8_t LIN_JUNCTION_TEMPERATURE_Data[2];
uint8_t LIN_TEMPERATURE_RISE_JS_Data[2];
uint8_t LIN_TEMPERATURE_RISE_SA_Data[2];
uint8_t LIN_DIAGNOSTIC_Data[8];

const lin_rx_cmd_t scheduleTable[] = {
    //Command, Type, TX/RX Length, Data Address
    {LIN_COMMAND, RECEIVE, 1, LIN_COMMAND_Data },
    {LIN_TRIGGER_TYPE, RECEIVE, 1, LIN_TRIGGER_TYPE_Data },
    {LIN_ENTER_SLEEP_MODE, RECEIVE, 1, LIN_ENTER_SLEEP_MODE_Data },
    {LIN_TJ_LIMIT, RECEIVE, 1, LIN_TJ_LIMIT_Data },
    {LIN_FACTOR_RDSON_RTHJS, RECEIVE, 2, LIN_FACTOR_RDSON_RTHJS_Data },
    {LIN_FACTOR_RDSON_RTHSA, RECEIVE, 2, LIN_FACTOR_RDSON_RTHSA_Data },
    {LIN_CURRENT2COUNTS_SQUARED, RECEIVE, 2, LIN_CURRENT2COUNTS_SQUARED_Data },
    {LIN_ISENSE_MAX, RECEIVE, 2, LIN_ISENSE_MAX_Data },
    {LIN_DAC_I_HW_TRIP, RECEIVE, 1, LIN_DAC_I_HW_TRIP_Data },
    {LIN_B1_COEF, RECEIVE, 1, LIN_B1_COEF_Data },
    {LIN_REDUCED_DRIVE_TIME, RECEIVE, 1, LIN_REDUCED_DRIVE_TIME_Data },
    {LIN_TCC_SAMPLE_TIME, RECEIVE, 2, LIN_TCC_SAMPLE_TIME_Data },
    {LIN_OUTPUT_STATE, TRANSMIT, 1, LIN_OUTPUT_STATE_Data },
    {LIN_GET_TRIGGER_TYPE, TRANSMIT, 1, LIN_GET_TRIGGER_TYPE_Data },
    {LIN_OVER_CURRENT_FAULT, TRANSMIT, 1, LIN_OVER_CURRENT_FAULT_Data },
    {LIN_UVLO_FAULT, TRANSMIT, 1, LIN_UVLO_FAULT_Data },
    {LIN_OVER_TEMP_FAULT, TRANSMIT, 1, LIN_OVER_TEMP_FAULT_Data },
    {LIN_ADC_VCC_SENSE, TRANSMIT, 2, LIN_ADC_VCC_SENSE_Data },
    {LIN_ADC_CURRENT_SENSE_UNCORRECTED, TRANSMIT, 2, LIN_ADC_CURRENT_SENSE_UNCORRECTED_Data },
    {LIN_ADC_TEMP_SENSE, TRANSMIT, 2, LIN_ADC_TEMP_SENSE_Data },
    {LIN_ADC_CURRENT_SENSE_CORRECTED, TRANSMIT, 2, LIN_ADC_CURRENT_SENSE_CORRECTED_Data },
    {LIN_CURRENT_SENSE_OFFSET, TRANSMIT, 2, LIN_CURRENT_SENSE_OFFSET_Data },
    {LIN_AMBIENT_TEMPERATURE, TRANSMIT, 2, LIN_AMBIENT_TEMPERATURE_Data },
    {LIN_HEATSINK_TEMPERATURE, TRANSMIT, 2, LIN_HEATSINK_TEMPERATURE_Data },
    {LIN_JUNCTION_TEMPERATURE, TRANSMIT, 2, LIN_JUNCTION_TEMPERATURE_Data },
    {LIN_TEMPERATURE_RISE_JS, TRANSMIT, 2, LIN_TEMPERATURE_RISE_JS_Data },
    {LIN_TEMPERATURE_RISE_SA, TRANSMIT, 2, LIN_TEMPERATURE_RISE_SA_Data },
    {LIN_DIAGNOSTIC, TRANSMIT, 8, LIN_DIAGNOSTIC_Data }
};
#define TABLE_SIZE  (sizeof(scheduleTable)/sizeof(lin_rx_cmd_t))

void LIN_Slave_Initialize(void);

void processLIN(void);

void Update_LIN_Data(void);


#endif	/* LIN_APP_H */

